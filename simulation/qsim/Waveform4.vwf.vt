// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2021 00:13:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          InstructionMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module InstructionMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AutoClock;
reg Clock;
reg [31:0] ProgramCounter;
// wires                                               
wire [31:0] Instruction;

// assign statements (if any)                          
InstructionMemory i1 (
// port map - connection between master ports and signals/registers   
	.AutoClock(AutoClock),
	.Clock(Clock),
	.Instruction(Instruction),
	.ProgramCounter(ProgramCounter)
);
initial 
begin 
#1000000 $finish;
end 

// AutoClock
always
begin
	AutoClock = 1'b0;
	AutoClock = #500 1'b1;
	#500;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 
// ProgramCounter[ 31 ]
initial
begin
	ProgramCounter[31] = 1'b0;
end 
// ProgramCounter[ 30 ]
initial
begin
	ProgramCounter[30] = 1'b0;
end 
// ProgramCounter[ 29 ]
initial
begin
	ProgramCounter[29] = 1'b0;
end 
// ProgramCounter[ 28 ]
initial
begin
	ProgramCounter[28] = 1'b0;
end 
// ProgramCounter[ 27 ]
initial
begin
	ProgramCounter[27] = 1'b0;
end 
// ProgramCounter[ 26 ]
initial
begin
	ProgramCounter[26] = 1'b0;
end 
// ProgramCounter[ 25 ]
initial
begin
	ProgramCounter[25] = 1'b0;
end 
// ProgramCounter[ 24 ]
initial
begin
	ProgramCounter[24] = 1'b0;
end 
// ProgramCounter[ 23 ]
initial
begin
	ProgramCounter[23] = 1'b0;
end 
// ProgramCounter[ 22 ]
initial
begin
	ProgramCounter[22] = 1'b0;
end 
// ProgramCounter[ 21 ]
initial
begin
	ProgramCounter[21] = 1'b0;
end 
// ProgramCounter[ 20 ]
initial
begin
	ProgramCounter[20] = 1'b0;
end 
// ProgramCounter[ 19 ]
initial
begin
	ProgramCounter[19] = 1'b0;
end 
// ProgramCounter[ 18 ]
initial
begin
	ProgramCounter[18] = 1'b0;
end 
// ProgramCounter[ 17 ]
initial
begin
	ProgramCounter[17] = 1'b0;
end 
// ProgramCounter[ 16 ]
initial
begin
	ProgramCounter[16] = 1'b0;
end 
// ProgramCounter[ 15 ]
initial
begin
	ProgramCounter[15] = 1'b0;
end 
// ProgramCounter[ 14 ]
initial
begin
	ProgramCounter[14] = 1'b0;
end 
// ProgramCounter[ 13 ]
initial
begin
	ProgramCounter[13] = 1'b0;
end 
// ProgramCounter[ 12 ]
initial
begin
	ProgramCounter[12] = 1'b0;
end 
// ProgramCounter[ 11 ]
initial
begin
	ProgramCounter[11] = 1'b0;
end 
// ProgramCounter[ 10 ]
initial
begin
	ProgramCounter[10] = 1'b0;
end 
// ProgramCounter[ 9 ]
initial
begin
	ProgramCounter[9] = 1'b0;
end 
// ProgramCounter[ 8 ]
initial
begin
	ProgramCounter[8] = 1'b0;
end 
// ProgramCounter[ 7 ]
initial
begin
	ProgramCounter[7] = 1'b0;
end 
// ProgramCounter[ 6 ]
initial
begin
	ProgramCounter[6] = 1'b0;
end 
// ProgramCounter[ 5 ]
initial
begin
	ProgramCounter[5] = 1'b0;
end 
// ProgramCounter[ 4 ]
initial
begin
	ProgramCounter[4] = 1'b0;
end 
// ProgramCounter[ 3 ]
initial
begin
	ProgramCounter[3] = 1'b0;
	ProgramCounter[3] = #800000 1'b1;
end 
// ProgramCounter[ 2 ]
initial
begin
	ProgramCounter[2] = 1'b0;
	ProgramCounter[2] = #400000 1'b1;
	ProgramCounter[2] = #400000 1'b0;
end 
// ProgramCounter[ 1 ]
initial
begin
	repeat(2)
	begin
		ProgramCounter[1] = 1'b0;
		ProgramCounter[1] = #200000 1'b1;
		# 200000;
	end
	ProgramCounter[1] = 1'b0;
end 
// ProgramCounter[ 0 ]
always
begin
	ProgramCounter[0] = 1'b0;
	ProgramCounter[0] = #100000 1'b1;
	#100000;
end 
endmodule

