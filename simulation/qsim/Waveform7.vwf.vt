// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/20/2021 01:52:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Button;
reg [5:0] Opcode;
reg curr_exec_process;
reg curr_select_proc_reg_read;
reg curr_select_proc_reg_write;
// wires                                               
wire ALU;
wire Halt;
wire Im;
wire In;
wire Jal;
wire Jr;
wire Jump;
wire Write;
wire WriteMem;
wire [4:0] alu_code;
wire branch;
wire change_pc;
wire exec_process;
wire select_proc_reg_read;
wire select_proc_reg_write;
wire type_r;
wire useStk;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.Button(Button),
	.Halt(Halt),
	.Im(Im),
	.In(In),
	.Jal(Jal),
	.Jr(Jr),
	.Jump(Jump),
	.Opcode(Opcode),
	.Write(Write),
	.WriteMem(WriteMem),
	.alu_code(alu_code),
	.branch(branch),
	.change_pc(change_pc),
	.curr_exec_process(curr_exec_process),
	.curr_select_proc_reg_read(curr_select_proc_reg_read),
	.curr_select_proc_reg_write(curr_select_proc_reg_write),
	.exec_process(exec_process),
	.select_proc_reg_read(select_proc_reg_read),
	.select_proc_reg_write(select_proc_reg_write),
	.type_r(type_r),
	.useStk(useStk)
);
initial 
begin 
#1000000 $finish;
end 

// Button
initial
begin
	Button = 1'b0;
end 
// Opcode[ 5 ]
initial
begin
	Opcode[5] = 1'b0;
	Opcode[5] = #800000 1'b1;
end 
// Opcode[ 4 ]
initial
begin
	Opcode[4] = 1'b1;
	Opcode[4] = #800000 1'b0;
end 
// Opcode[ 3 ]
initial
begin
	Opcode[3] = 1'b0;
	Opcode[3] = #400000 1'b1;
	Opcode[3] = #400000 1'b0;
end 
// Opcode[ 2 ]
initial
begin
	repeat(2)
	begin
		Opcode[2] = 1'b0;
		Opcode[2] = #200000 1'b1;
		# 200000;
	end
	Opcode[2] = 1'b0;
end 
// Opcode[ 1 ]
always
begin
	Opcode[1] = 1'b0;
	Opcode[1] = #100000 1'b1;
	#100000;
end 
// Opcode[ 0 ]
always
begin
	Opcode[0] = 1'b0;
	Opcode[0] = #50000 1'b1;
	#50000;
end 

// curr_exec_process
initial
begin
	curr_exec_process = 1'b0;
end 

// curr_select_proc_reg_read
initial
begin
	curr_select_proc_reg_read = 1'b0;
end 

// curr_select_proc_reg_write
initial
begin
	curr_select_proc_reg_write = 1'b0;
end 
endmodule

