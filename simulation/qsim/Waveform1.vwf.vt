// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2021 22:59:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Data1;
reg [31:0] Data2;
reg [4:0] alu_code;
// wires                                               
wire [31:0] OutALU;
wire zero;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.Data1(Data1),
	.Data2(Data2),
	.OutALU(OutALU),
	.alu_code(alu_code),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// Data1[ 31 ]
initial
begin
	Data1[31] = 1'b0;
end 
// Data1[ 30 ]
initial
begin
	Data1[30] = 1'b0;
end 
// Data1[ 29 ]
initial
begin
	Data1[29] = 1'b0;
end 
// Data1[ 28 ]
initial
begin
	Data1[28] = 1'b0;
end 
// Data1[ 27 ]
initial
begin
	Data1[27] = 1'b0;
end 
// Data1[ 26 ]
initial
begin
	Data1[26] = 1'b0;
end 
// Data1[ 25 ]
initial
begin
	Data1[25] = 1'b0;
end 
// Data1[ 24 ]
initial
begin
	Data1[24] = 1'b0;
end 
// Data1[ 23 ]
initial
begin
	Data1[23] = 1'b0;
end 
// Data1[ 22 ]
initial
begin
	Data1[22] = 1'b0;
end 
// Data1[ 21 ]
initial
begin
	Data1[21] = 1'b0;
end 
// Data1[ 20 ]
initial
begin
	Data1[20] = 1'b0;
end 
// Data1[ 19 ]
initial
begin
	Data1[19] = 1'b0;
end 
// Data1[ 18 ]
initial
begin
	Data1[18] = 1'b0;
end 
// Data1[ 17 ]
initial
begin
	Data1[17] = 1'b0;
end 
// Data1[ 16 ]
initial
begin
	Data1[16] = 1'b0;
end 
// Data1[ 15 ]
initial
begin
	Data1[15] = 1'b0;
end 
// Data1[ 14 ]
initial
begin
	Data1[14] = 1'b0;
end 
// Data1[ 13 ]
initial
begin
	Data1[13] = 1'b0;
end 
// Data1[ 12 ]
initial
begin
	Data1[12] = 1'b0;
end 
// Data1[ 11 ]
initial
begin
	Data1[11] = 1'b0;
end 
// Data1[ 10 ]
initial
begin
	Data1[10] = 1'b0;
end 
// Data1[ 9 ]
initial
begin
	Data1[9] = 1'b0;
end 
// Data1[ 8 ]
initial
begin
	Data1[8] = 1'b0;
end 
// Data1[ 7 ]
initial
begin
	Data1[7] = 1'b0;
end 
// Data1[ 6 ]
initial
begin
	Data1[6] = 1'b0;
end 
// Data1[ 5 ]
initial
begin
	Data1[5] = 1'b0;
end 
// Data1[ 4 ]
initial
begin
	Data1[4] = 1'b0;
end 
// Data1[ 3 ]
initial
begin
	Data1[3] = 1'b0;
end 
// Data1[ 2 ]
initial
begin
	Data1[2] = 1'b1;
end 
// Data1[ 1 ]
initial
begin
	Data1[1] = 1'b0;
end 
// Data1[ 0 ]
initial
begin
	Data1[0] = 1'b1;
end 
// Data2[ 31 ]
initial
begin
	Data2[31] = 1'b0;
end 
// Data2[ 30 ]
initial
begin
	Data2[30] = 1'b0;
end 
// Data2[ 29 ]
initial
begin
	Data2[29] = 1'b0;
end 
// Data2[ 28 ]
initial
begin
	Data2[28] = 1'b0;
end 
// Data2[ 27 ]
initial
begin
	Data2[27] = 1'b0;
end 
// Data2[ 26 ]
initial
begin
	Data2[26] = 1'b0;
end 
// Data2[ 25 ]
initial
begin
	Data2[25] = 1'b0;
end 
// Data2[ 24 ]
initial
begin
	Data2[24] = 1'b0;
end 
// Data2[ 23 ]
initial
begin
	Data2[23] = 1'b0;
end 
// Data2[ 22 ]
initial
begin
	Data2[22] = 1'b0;
end 
// Data2[ 21 ]
initial
begin
	Data2[21] = 1'b0;
end 
// Data2[ 20 ]
initial
begin
	Data2[20] = 1'b0;
end 
// Data2[ 19 ]
initial
begin
	Data2[19] = 1'b0;
end 
// Data2[ 18 ]
initial
begin
	Data2[18] = 1'b0;
end 
// Data2[ 17 ]
initial
begin
	Data2[17] = 1'b0;
end 
// Data2[ 16 ]
initial
begin
	Data2[16] = 1'b0;
end 
// Data2[ 15 ]
initial
begin
	Data2[15] = 1'b0;
end 
// Data2[ 14 ]
initial
begin
	Data2[14] = 1'b0;
end 
// Data2[ 13 ]
initial
begin
	Data2[13] = 1'b0;
end 
// Data2[ 12 ]
initial
begin
	Data2[12] = 1'b0;
end 
// Data2[ 11 ]
initial
begin
	Data2[11] = 1'b0;
end 
// Data2[ 10 ]
initial
begin
	Data2[10] = 1'b0;
end 
// Data2[ 9 ]
initial
begin
	Data2[9] = 1'b0;
end 
// Data2[ 8 ]
initial
begin
	Data2[8] = 1'b0;
end 
// Data2[ 7 ]
initial
begin
	Data2[7] = 1'b0;
end 
// Data2[ 6 ]
initial
begin
	Data2[6] = 1'b0;
end 
// Data2[ 5 ]
initial
begin
	Data2[5] = 1'b0;
end 
// Data2[ 4 ]
initial
begin
	Data2[4] = 1'b0;
end 
// Data2[ 3 ]
initial
begin
	Data2[3] = 1'b0;
end 
// Data2[ 2 ]
initial
begin
	Data2[2] = 1'b1;
end 
// Data2[ 1 ]
initial
begin
	Data2[1] = 1'b1;
end 
// Data2[ 0 ]
initial
begin
	Data2[0] = 1'b1;
end 
// alu_code[ 4 ]
initial
begin
	alu_code[4] = 1'b0;
end 
// alu_code[ 3 ]
initial
begin
	alu_code[3] = 1'b0;
	alu_code[3] = #800000 1'b1;
end 
// alu_code[ 2 ]
initial
begin
	alu_code[2] = 1'b0;
	alu_code[2] = #400000 1'b1;
	alu_code[2] = #400000 1'b0;
end 
// alu_code[ 1 ]
initial
begin
	repeat(2)
	begin
		alu_code[1] = 1'b0;
		alu_code[1] = #200000 1'b1;
		# 200000;
	end
	alu_code[1] = 1'b0;
end 
// alu_code[ 0 ]
always
begin
	alu_code[0] = 1'b0;
	alu_code[0] = #100000 1'b1;
	#100000;
end 
endmodule

