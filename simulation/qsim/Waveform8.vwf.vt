// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/20/2021 02:21:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlSignalMemomry
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlSignalMemomry_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg exec_process_in;
reg select_proc_reg_read_in;
reg select_proc_reg_write_in;
// wires                                               
wire exec_process_out;
wire select_proc_reg_read_out;
wire select_proc_reg_write_out;

// assign statements (if any)                          
ControlSignalMemomry i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.exec_process_in(exec_process_in),
	.exec_process_out(exec_process_out),
	.select_proc_reg_read_in(select_proc_reg_read_in),
	.select_proc_reg_read_out(select_proc_reg_read_out),
	.select_proc_reg_write_in(select_proc_reg_write_in),
	.select_proc_reg_write_out(select_proc_reg_write_out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// exec_process_in
always
begin
	exec_process_in = 1'b0;
	exec_process_in = #100000 1'b1;
	#100000;
end 

// select_proc_reg_read_in
initial
begin
	repeat(3)
	begin
		select_proc_reg_read_in = 1'b0;
		select_proc_reg_read_in = #150000 1'b1;
		# 150000;
	end
	select_proc_reg_read_in = 1'b0;
end 

// select_proc_reg_write_in
initial
begin
	repeat(2)
	begin
		select_proc_reg_write_in = 1'b0;
		select_proc_reg_write_in = #200000 1'b1;
		# 200000;
	end
	select_proc_reg_write_in = 1'b0;
end 
endmodule

