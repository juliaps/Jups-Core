// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/21/2021 17:13:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RandomAccessMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RandomAccessMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Addr;
reg Clock;
reg ClockAuto;
reg [31:0] DataIn;
reg WriteMem;
reg useStk;
// wires                                               
wire [31:0] DataOut;

// assign statements (if any)                          
RandomAccessMemory i1 (
// port map - connection between master ports and signals/registers   
	.Addr(Addr),
	.Clock(Clock),
	.ClockAuto(ClockAuto),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.WriteMem(WriteMem),
	.useStk(useStk)
);
initial 
begin 
#1000000 $finish;
end 
// Addr[ 31 ]
initial
begin
	Addr[31] = 1'b0;
end 
// Addr[ 30 ]
initial
begin
	Addr[30] = 1'b0;
end 
// Addr[ 29 ]
initial
begin
	Addr[29] = 1'b0;
end 
// Addr[ 28 ]
initial
begin
	Addr[28] = 1'b0;
end 
// Addr[ 27 ]
initial
begin
	Addr[27] = 1'b0;
end 
// Addr[ 26 ]
initial
begin
	Addr[26] = 1'b0;
end 
// Addr[ 25 ]
initial
begin
	Addr[25] = 1'b0;
end 
// Addr[ 24 ]
initial
begin
	Addr[24] = 1'b0;
end 
// Addr[ 23 ]
initial
begin
	Addr[23] = 1'b0;
end 
// Addr[ 22 ]
initial
begin
	Addr[22] = 1'b0;
end 
// Addr[ 21 ]
initial
begin
	Addr[21] = 1'b0;
end 
// Addr[ 20 ]
initial
begin
	Addr[20] = 1'b0;
end 
// Addr[ 19 ]
initial
begin
	Addr[19] = 1'b0;
end 
// Addr[ 18 ]
initial
begin
	Addr[18] = 1'b0;
end 
// Addr[ 17 ]
initial
begin
	Addr[17] = 1'b0;
end 
// Addr[ 16 ]
initial
begin
	Addr[16] = 1'b0;
end 
// Addr[ 15 ]
initial
begin
	Addr[15] = 1'b0;
end 
// Addr[ 14 ]
initial
begin
	Addr[14] = 1'b0;
end 
// Addr[ 13 ]
initial
begin
	Addr[13] = 1'b0;
end 
// Addr[ 12 ]
initial
begin
	Addr[12] = 1'b0;
end 
// Addr[ 11 ]
initial
begin
	Addr[11] = 1'b0;
end 
// Addr[ 10 ]
initial
begin
	Addr[10] = 1'b0;
end 
// Addr[ 9 ]
initial
begin
	Addr[9] = 1'b0;
end 
// Addr[ 8 ]
initial
begin
	Addr[8] = 1'b0;
end 
// Addr[ 7 ]
initial
begin
	Addr[7] = 1'b0;
end 
// Addr[ 6 ]
initial
begin
	Addr[6] = 1'b0;
end 
// Addr[ 5 ]
initial
begin
	Addr[5] = 1'b0;
end 
// Addr[ 4 ]
initial
begin
	Addr[4] = 1'b0;
end 
// Addr[ 3 ]
initial
begin
	Addr[3] = 1'b1;
end 
// Addr[ 2 ]
initial
begin
	Addr[2] = 1'b0;
end 
// Addr[ 1 ]
initial
begin
	Addr[1] = 1'b1;
end 
// Addr[ 0 ]
initial
begin
	Addr[0] = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// ClockAuto
always
begin
	ClockAuto = 1'b0;
	ClockAuto = #1000 1'b1;
	#1000;
end 
// DataIn[ 31 ]
initial
begin
	DataIn[31] = 1'b0;
end 
// DataIn[ 30 ]
initial
begin
	DataIn[30] = 1'b0;
end 
// DataIn[ 29 ]
initial
begin
	DataIn[29] = 1'b0;
end 
// DataIn[ 28 ]
initial
begin
	DataIn[28] = 1'b0;
end 
// DataIn[ 27 ]
initial
begin
	DataIn[27] = 1'b0;
end 
// DataIn[ 26 ]
initial
begin
	DataIn[26] = 1'b0;
end 
// DataIn[ 25 ]
initial
begin
	DataIn[25] = 1'b0;
end 
// DataIn[ 24 ]
initial
begin
	DataIn[24] = 1'b0;
end 
// DataIn[ 23 ]
initial
begin
	DataIn[23] = 1'b0;
end 
// DataIn[ 22 ]
initial
begin
	DataIn[22] = 1'b0;
end 
// DataIn[ 21 ]
initial
begin
	DataIn[21] = 1'b0;
end 
// DataIn[ 20 ]
initial
begin
	DataIn[20] = 1'b0;
end 
// DataIn[ 19 ]
initial
begin
	DataIn[19] = 1'b0;
end 
// DataIn[ 18 ]
initial
begin
	DataIn[18] = 1'b0;
end 
// DataIn[ 17 ]
initial
begin
	DataIn[17] = 1'b0;
end 
// DataIn[ 16 ]
initial
begin
	DataIn[16] = 1'b0;
end 
// DataIn[ 15 ]
initial
begin
	DataIn[15] = 1'b0;
end 
// DataIn[ 14 ]
initial
begin
	DataIn[14] = 1'b0;
end 
// DataIn[ 13 ]
initial
begin
	DataIn[13] = 1'b0;
end 
// DataIn[ 12 ]
initial
begin
	DataIn[12] = 1'b0;
end 
// DataIn[ 11 ]
initial
begin
	DataIn[11] = 1'b0;
end 
// DataIn[ 10 ]
initial
begin
	DataIn[10] = 1'b0;
end 
// DataIn[ 9 ]
initial
begin
	DataIn[9] = 1'b0;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
	DataIn[3] = #290000 1'b1;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b1;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
	DataIn[1] = #290000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b1;
	DataIn[0] = #290000 1'b0;
end 

// WriteMem
initial
begin
	WriteMem = 1'b0;
	WriteMem = #40000 1'b1;
	WriteMem = #70000 1'b0;
	WriteMem = #300000 1'b1;
	WriteMem = #130000 1'b0;
end 

// useStk
initial
begin
	useStk = 1'b0;
	useStk = #410000 1'b1;
	useStk = #130000 1'b0;
end 
endmodule

