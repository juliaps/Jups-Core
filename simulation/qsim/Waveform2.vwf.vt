// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2021 23:52:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegisterBank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterBank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Addr1;
reg [4:0] Addr2;
reg [4:0] Addr3;
reg [4:0] AddrWrite;
reg Clock;
reg [31:0] DataIn;
reg [31:0] ProgramCounter;
reg Write;
reg jal;
reg select_proc_reg_read;
reg select_proc_reg_write;
// wires                                               
wire [31:0] Data1;
wire [31:0] Data2;
wire [31:0] Data3;

// assign statements (if any)                          
RegisterBank i1 (
// port map - connection between master ports and signals/registers   
	.Addr1(Addr1),
	.Addr2(Addr2),
	.Addr3(Addr3),
	.AddrWrite(AddrWrite),
	.Clock(Clock),
	.Data1(Data1),
	.Data2(Data2),
	.Data3(Data3),
	.DataIn(DataIn),
	.ProgramCounter(ProgramCounter),
	.Write(Write),
	.jal(jal),
	.select_proc_reg_read(select_proc_reg_read),
	.select_proc_reg_write(select_proc_reg_write)
);
initial 
begin 
#1000000 $finish;
end 
// Addr1[ 4 ]
initial
begin
	Addr1[4] = 1'b0;
end 
// Addr1[ 3 ]
initial
begin
	Addr1[3] = 1'b0;
end 
// Addr1[ 2 ]
initial
begin
	Addr1[2] = 1'b0;
end 
// Addr1[ 1 ]
initial
begin
	Addr1[1] = 1'b0;
end 
// Addr1[ 0 ]
initial
begin
	Addr1[0] = 1'b1;
end 
// Addr2[ 4 ]
initial
begin
	Addr2[4] = 1'b0;
end 
// Addr2[ 3 ]
initial
begin
	Addr2[3] = 1'b0;
end 
// Addr2[ 2 ]
initial
begin
	Addr2[2] = 1'b0;
end 
// Addr2[ 1 ]
initial
begin
	Addr2[1] = 1'b1;
end 
// Addr2[ 0 ]
initial
begin
	Addr2[0] = 1'b0;
end 
// Addr3[ 4 ]
initial
begin
	Addr3[4] = 1'b1;
end 
// Addr3[ 3 ]
initial
begin
	Addr3[3] = 1'b1;
end 
// Addr3[ 2 ]
initial
begin
	Addr3[2] = 1'b1;
end 
// Addr3[ 1 ]
initial
begin
	Addr3[1] = 1'b1;
end 
// Addr3[ 0 ]
initial
begin
	Addr3[0] = 1'b0;
end 
// AddrWrite[ 4 ]
initial
begin
	AddrWrite[4] = 1'b0;
end 
// AddrWrite[ 3 ]
initial
begin
	AddrWrite[3] = 1'b0;
end 
// AddrWrite[ 2 ]
initial
begin
	AddrWrite[2] = 1'b0;
end 
// AddrWrite[ 1 ]
initial
begin
	AddrWrite[1] = 1'b0;
end 
// AddrWrite[ 0 ]
initial
begin
	AddrWrite[0] = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #100000 1'b1;
	#100000;
end 
// DataIn[ 31 ]
initial
begin
	DataIn[31] = 1'b0;
end 
// DataIn[ 30 ]
initial
begin
	DataIn[30] = 1'b0;
end 
// DataIn[ 29 ]
initial
begin
	DataIn[29] = 1'b0;
end 
// DataIn[ 28 ]
initial
begin
	DataIn[28] = 1'b0;
end 
// DataIn[ 27 ]
initial
begin
	DataIn[27] = 1'b0;
end 
// DataIn[ 26 ]
initial
begin
	DataIn[26] = 1'b0;
end 
// DataIn[ 25 ]
initial
begin
	DataIn[25] = 1'b0;
end 
// DataIn[ 24 ]
initial
begin
	DataIn[24] = 1'b0;
end 
// DataIn[ 23 ]
initial
begin
	DataIn[23] = 1'b0;
end 
// DataIn[ 22 ]
initial
begin
	DataIn[22] = 1'b0;
end 
// DataIn[ 21 ]
initial
begin
	DataIn[21] = 1'b0;
end 
// DataIn[ 20 ]
initial
begin
	DataIn[20] = 1'b0;
end 
// DataIn[ 19 ]
initial
begin
	DataIn[19] = 1'b0;
end 
// DataIn[ 18 ]
initial
begin
	DataIn[18] = 1'b0;
end 
// DataIn[ 17 ]
initial
begin
	DataIn[17] = 1'b0;
end 
// DataIn[ 16 ]
initial
begin
	DataIn[16] = 1'b0;
end 
// DataIn[ 15 ]
initial
begin
	DataIn[15] = 1'b0;
end 
// DataIn[ 14 ]
initial
begin
	DataIn[14] = 1'b0;
end 
// DataIn[ 13 ]
initial
begin
	DataIn[13] = 1'b0;
end 
// DataIn[ 12 ]
initial
begin
	DataIn[12] = 1'b0;
end 
// DataIn[ 11 ]
initial
begin
	DataIn[11] = 1'b0;
end 
// DataIn[ 10 ]
initial
begin
	DataIn[10] = 1'b0;
end 
// DataIn[ 9 ]
initial
begin
	DataIn[9] = 1'b0;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b1;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b1;
end 
// ProgramCounter[ 31 ]
initial
begin
	ProgramCounter[31] = 1'b0;
end 
// ProgramCounter[ 30 ]
initial
begin
	ProgramCounter[30] = 1'b0;
end 
// ProgramCounter[ 29 ]
initial
begin
	ProgramCounter[29] = 1'b0;
end 
// ProgramCounter[ 28 ]
initial
begin
	ProgramCounter[28] = 1'b0;
end 
// ProgramCounter[ 27 ]
initial
begin
	ProgramCounter[27] = 1'b0;
end 
// ProgramCounter[ 26 ]
initial
begin
	ProgramCounter[26] = 1'b0;
end 
// ProgramCounter[ 25 ]
initial
begin
	ProgramCounter[25] = 1'b0;
end 
// ProgramCounter[ 24 ]
initial
begin
	ProgramCounter[24] = 1'b0;
end 
// ProgramCounter[ 23 ]
initial
begin
	ProgramCounter[23] = 1'b0;
end 
// ProgramCounter[ 22 ]
initial
begin
	ProgramCounter[22] = 1'b0;
end 
// ProgramCounter[ 21 ]
initial
begin
	ProgramCounter[21] = 1'b0;
end 
// ProgramCounter[ 20 ]
initial
begin
	ProgramCounter[20] = 1'b0;
end 
// ProgramCounter[ 19 ]
initial
begin
	ProgramCounter[19] = 1'b0;
end 
// ProgramCounter[ 18 ]
initial
begin
	ProgramCounter[18] = 1'b0;
end 
// ProgramCounter[ 17 ]
initial
begin
	ProgramCounter[17] = 1'b0;
end 
// ProgramCounter[ 16 ]
initial
begin
	ProgramCounter[16] = 1'b0;
end 
// ProgramCounter[ 15 ]
initial
begin
	ProgramCounter[15] = 1'b0;
end 
// ProgramCounter[ 14 ]
initial
begin
	ProgramCounter[14] = 1'b0;
end 
// ProgramCounter[ 13 ]
initial
begin
	ProgramCounter[13] = 1'b0;
end 
// ProgramCounter[ 12 ]
initial
begin
	ProgramCounter[12] = 1'b0;
end 
// ProgramCounter[ 11 ]
initial
begin
	ProgramCounter[11] = 1'b0;
end 
// ProgramCounter[ 10 ]
initial
begin
	ProgramCounter[10] = 1'b0;
end 
// ProgramCounter[ 9 ]
initial
begin
	ProgramCounter[9] = 1'b0;
end 
// ProgramCounter[ 8 ]
initial
begin
	ProgramCounter[8] = 1'b0;
end 
// ProgramCounter[ 7 ]
initial
begin
	ProgramCounter[7] = 1'b0;
end 
// ProgramCounter[ 6 ]
initial
begin
	ProgramCounter[6] = 1'b0;
end 
// ProgramCounter[ 5 ]
initial
begin
	ProgramCounter[5] = 1'b0;
end 
// ProgramCounter[ 4 ]
initial
begin
	ProgramCounter[4] = 1'b0;
end 
// ProgramCounter[ 3 ]
initial
begin
	ProgramCounter[3] = 1'b1;
end 
// ProgramCounter[ 2 ]
initial
begin
	ProgramCounter[2] = 1'b0;
end 
// ProgramCounter[ 1 ]
initial
begin
	ProgramCounter[1] = 1'b1;
end 
// ProgramCounter[ 0 ]
initial
begin
	ProgramCounter[0] = 1'b1;
end 

// Write
initial
begin
	Write = 1'b1;
end 

// jal
initial
begin
	jal = 1'b1;
end 

// select_proc_reg_read
initial
begin
	select_proc_reg_read = 1'b0;
	select_proc_reg_read = #510000 1'b1;
	select_proc_reg_read = #380000 1'b0;
end 

// select_proc_reg_write
initial
begin
	select_proc_reg_write = 1'b0;
	select_proc_reg_write = #510000 1'b1;
	select_proc_reg_write = #380000 1'b0;
end 
endmodule

