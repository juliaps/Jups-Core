// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/10/2021 23:42:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProgramCounter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProgramCounter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] AddressJump;
reg Clock;
reg Halt;
reg branch;
reg change_pc;
reg j;
reg jr;
reg [31:0] pc_in;
reg zero;
// wires                                               
wire [31:0] pc_out;

// assign statements (if any)                          
ProgramCounter i1 (
// port map - connection between master ports and signals/registers   
	.AddressJump(AddressJump),
	.Clock(Clock),
	.Halt(Halt),
	.branch(branch),
	.change_pc(change_pc),
	.j(j),
	.jr(jr),
	.pc_in(pc_in),
	.pc_out(pc_out),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// AddressJump[ 31 ]
initial
begin
	AddressJump[31] = 1'b0;
end 
// AddressJump[ 30 ]
initial
begin
	AddressJump[30] = 1'b0;
end 
// AddressJump[ 29 ]
initial
begin
	AddressJump[29] = 1'b0;
end 
// AddressJump[ 28 ]
initial
begin
	AddressJump[28] = 1'b0;
end 
// AddressJump[ 27 ]
initial
begin
	AddressJump[27] = 1'b0;
end 
// AddressJump[ 26 ]
initial
begin
	AddressJump[26] = 1'b0;
end 
// AddressJump[ 25 ]
initial
begin
	AddressJump[25] = 1'b0;
end 
// AddressJump[ 24 ]
initial
begin
	AddressJump[24] = 1'b0;
end 
// AddressJump[ 23 ]
initial
begin
	AddressJump[23] = 1'b0;
end 
// AddressJump[ 22 ]
initial
begin
	AddressJump[22] = 1'b0;
end 
// AddressJump[ 21 ]
initial
begin
	AddressJump[21] = 1'b0;
end 
// AddressJump[ 20 ]
initial
begin
	AddressJump[20] = 1'b0;
end 
// AddressJump[ 19 ]
initial
begin
	AddressJump[19] = 1'b0;
end 
// AddressJump[ 18 ]
initial
begin
	AddressJump[18] = 1'b0;
end 
// AddressJump[ 17 ]
initial
begin
	AddressJump[17] = 1'b0;
end 
// AddressJump[ 16 ]
initial
begin
	AddressJump[16] = 1'b0;
end 
// AddressJump[ 15 ]
initial
begin
	AddressJump[15] = 1'b0;
end 
// AddressJump[ 14 ]
initial
begin
	AddressJump[14] = 1'b0;
end 
// AddressJump[ 13 ]
initial
begin
	AddressJump[13] = 1'b0;
end 
// AddressJump[ 12 ]
initial
begin
	AddressJump[12] = 1'b0;
end 
// AddressJump[ 11 ]
initial
begin
	AddressJump[11] = 1'b0;
end 
// AddressJump[ 10 ]
initial
begin
	AddressJump[10] = 1'b0;
end 
// AddressJump[ 9 ]
initial
begin
	AddressJump[9] = 1'b0;
end 
// AddressJump[ 8 ]
initial
begin
	AddressJump[8] = 1'b0;
end 
// AddressJump[ 7 ]
initial
begin
	AddressJump[7] = 1'b0;
end 
// AddressJump[ 6 ]
initial
begin
	AddressJump[6] = 1'b0;
end 
// AddressJump[ 5 ]
initial
begin
	AddressJump[5] = 1'b0;
end 
// AddressJump[ 4 ]
initial
begin
	AddressJump[4] = 1'b0;
end 
// AddressJump[ 3 ]
initial
begin
	AddressJump[3] = 1'b0;
end 
// AddressJump[ 2 ]
initial
begin
	AddressJump[2] = 1'b1;
end 
// AddressJump[ 1 ]
initial
begin
	AddressJump[1] = 1'b1;
end 
// AddressJump[ 0 ]
initial
begin
	AddressJump[0] = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// Halt
initial
begin
	Halt = 1'b0;
	Halt = #140000 1'b1;
	Halt = #40000 1'b0;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #430000 1'b1;
	branch = #50000 1'b0;
end 

// change_pc
initial
begin
	change_pc = 1'b0;
	change_pc = #230000 1'b1;
	change_pc = #60000 1'b0;
end 

// j
initial
begin
	j = 1'b0;
end 

// jr
initial
begin
	jr = 1'b0;
	jr = #730000 1'b1;
	jr = #40000 1'b0;
end 
// pc_in[ 31 ]
initial
begin
	pc_in[31] = 1'b0;
end 
// pc_in[ 30 ]
initial
begin
	pc_in[30] = 1'b0;
end 
// pc_in[ 29 ]
initial
begin
	pc_in[29] = 1'b0;
end 
// pc_in[ 28 ]
initial
begin
	pc_in[28] = 1'b0;
end 
// pc_in[ 27 ]
initial
begin
	pc_in[27] = 1'b0;
end 
// pc_in[ 26 ]
initial
begin
	pc_in[26] = 1'b0;
end 
// pc_in[ 25 ]
initial
begin
	pc_in[25] = 1'b0;
end 
// pc_in[ 24 ]
initial
begin
	pc_in[24] = 1'b0;
end 
// pc_in[ 23 ]
initial
begin
	pc_in[23] = 1'b0;
end 
// pc_in[ 22 ]
initial
begin
	pc_in[22] = 1'b0;
end 
// pc_in[ 21 ]
initial
begin
	pc_in[21] = 1'b0;
end 
// pc_in[ 20 ]
initial
begin
	pc_in[20] = 1'b0;
end 
// pc_in[ 19 ]
initial
begin
	pc_in[19] = 1'b0;
end 
// pc_in[ 18 ]
initial
begin
	pc_in[18] = 1'b0;
end 
// pc_in[ 17 ]
initial
begin
	pc_in[17] = 1'b0;
end 
// pc_in[ 16 ]
initial
begin
	pc_in[16] = 1'b0;
end 
// pc_in[ 15 ]
initial
begin
	pc_in[15] = 1'b0;
end 
// pc_in[ 14 ]
initial
begin
	pc_in[14] = 1'b0;
end 
// pc_in[ 13 ]
initial
begin
	pc_in[13] = 1'b0;
end 
// pc_in[ 12 ]
initial
begin
	pc_in[12] = 1'b0;
end 
// pc_in[ 11 ]
initial
begin
	pc_in[11] = 1'b0;
end 
// pc_in[ 10 ]
initial
begin
	pc_in[10] = 1'b0;
end 
// pc_in[ 9 ]
initial
begin
	pc_in[9] = 1'b0;
end 
// pc_in[ 8 ]
initial
begin
	pc_in[8] = 1'b0;
end 
// pc_in[ 7 ]
initial
begin
	pc_in[7] = 1'b0;
end 
// pc_in[ 6 ]
initial
begin
	pc_in[6] = 1'b0;
end 
// pc_in[ 5 ]
initial
begin
	pc_in[5] = 1'b0;
end 
// pc_in[ 4 ]
initial
begin
	pc_in[4] = 1'b0;
end 
// pc_in[ 3 ]
initial
begin
	pc_in[3] = 1'b1;
end 
// pc_in[ 2 ]
initial
begin
	pc_in[2] = 1'b0;
end 
// pc_in[ 1 ]
initial
begin
	pc_in[1] = 1'b1;
end 
// pc_in[ 0 ]
initial
begin
	pc_in[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #430000 1'b1;
	zero = #80000 1'b0;
end 
endmodule

