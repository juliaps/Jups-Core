// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2019 23:15:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          JupsCore
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module JupsCore_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AutoClock;
reg Button;
reg [15:0] Switches;
reg clk;
// wires                                               
wire [6:0] Display1;
wire [6:0] Display2;
wire [6:0] Display3;
wire [6:0] DisplaySignal;
wire [31:0] Instruction;
wire [6:0] dPC1;
wire [6:0] dPC2;
wire [31:0] data1;
wire [31:0] data2;
wire [31:0] data3;
wire [31:0] dataALU;
wire halt;
wire [31:0] programCounter;

// assign statements (if any)                          
JupsCore i1 (
// port map - connection between master ports and signals/registers   
	.AutoClock(AutoClock),
	.Button(Button),
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.DisplaySignal(DisplaySignal),
	.Instruction(Instruction),
	.Switches(Switches),
	.clk(clk),
	.dPC1(dPC1),
	.dPC2(dPC2),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.dataALU(dataALU),
	.halt(halt),
	.programCounter(programCounter)
);
initial 
begin 
#1000000 $finish;
end 

// AutoClock
always
begin
	AutoClock = 1'b0;
	AutoClock = #50 1'b1;
	#50;
end 

// Button
initial
begin
	Button = 1'b0;
end 
// Switches[ 15 ]
initial
begin
	Switches[15] = 1'b0;
end 
// Switches[ 14 ]
initial
begin
	Switches[14] = 1'b0;
end 
// Switches[ 13 ]
initial
begin
	Switches[13] = 1'b0;
end 
// Switches[ 12 ]
initial
begin
	Switches[12] = 1'b0;
end 
// Switches[ 11 ]
initial
begin
	Switches[11] = 1'b0;
end 
// Switches[ 10 ]
initial
begin
	Switches[10] = 1'b0;
end 
// Switches[ 9 ]
initial
begin
	Switches[9] = 1'b0;
end 
// Switches[ 8 ]
initial
begin
	Switches[8] = 1'b0;
end 
// Switches[ 7 ]
initial
begin
	Switches[7] = 1'b0;
end 
// Switches[ 6 ]
initial
begin
	Switches[6] = 1'b0;
end 
// Switches[ 5 ]
initial
begin
	Switches[5] = 1'b0;
end 
// Switches[ 4 ]
initial
begin
	Switches[4] = 1'b0;
end 
// Switches[ 3 ]
initial
begin
	Switches[3] = 1'b0;
end 
// Switches[ 2 ]
initial
begin
	Switches[2] = 1'b0;
end 
// Switches[ 1 ]
initial
begin
	Switches[1] = 1'b0;
end 
// Switches[ 0 ]
initial
begin
	Switches[0] = 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
endmodule

